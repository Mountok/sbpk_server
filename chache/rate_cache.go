package cache

import (
	"log"
	"sync"
	"time"
)

type CachedRate struct {
	Rate      float64
	Timestamp time.Time
}

var (
	cachedRates   = make(map[string]CachedRate)
	cacheDuration = 10 * time.Minute
	mu            sync.Mutex
)

// GetCachedRate –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—É—Ä—Å –∏–∑ –∫—ç—à–∞ –∏–ª–∏ false, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –∏–ª–∏ –æ–Ω —É—Å—Ç–∞—Ä–µ–ª
func GetCachedRate(key string) (float64, bool) {
	mu.Lock()
	defer mu.Unlock()

	rateData, ok := cachedRates[key]
	if !ok {
		return 0, false
	}

	if time.Since(rateData.Timestamp) > cacheDuration {
		return 0, false
	}

	log.Println("üì¶ –ö—É—Ä—Å –≤–∑—è—Ç –∏–∑ –∫—ç—à–∞ –¥–ª—è", key)
	return rateData.Rate, true
}

// SetCachedRate —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫—É—Ä—Å –≤ –∫—ç—à
func SetCachedRate(key string, rate float64) {
	mu.Lock()
	defer mu.Unlock()

	cachedRates[key] = CachedRate{
		Rate:      rate,
		Timestamp: time.Now(),
	}

	log.Println("‚úÖ –ö—É—Ä—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –∫—ç—à –¥–ª—è", key)
}
