package main

import (
	"log"
	"net/http"
	"os"
	"strings"

	"github.com/gin-gonic/gin"
	"github.com/go-resty/resty/v2"
)

type ConvertRequest struct {
	Amount float64 `json:"amount"` // —Å—É–º–º–∞
	From   string  `json:"from"`   // –∏—Å—Ö–æ–¥–Ω–∞—è –≤–∞–ª—é—Ç–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: "RUB"
	To     string  `json:"to"`     // —Ü–µ–ª–µ–≤–∞—è –≤–∞–ª—é—Ç–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: "USDT"
}

type ConvertResponse struct {
	ConvertedAmount float64 `json:"convertedAmount"` // —Ä–µ–∑—É–ª—å—Ç–∞—Ç
}

func main() {
	// –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è PORT –∏–ª–∏ 8080 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
	port := os.Getenv("PORT")
	if port == "" {
		port = "8080" // –µ—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è PORT –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º 8080
	}

	r := gin.Default()

	r.POST("/convert", func(c *gin.Context) {
		var req ConvertRequest
		if err := c.BindJSON(&req); err != nil {
			c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞"})
			return
		}

		from := strings.ToLower(req.From)
		to := strings.ToLower(req.To)

		if from == "" || to == "" || req.Amount <= 0 {
			c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞"})
			return
		}

		// –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
		url := "https://api.coingecko.com/api/v3/simple/price?ids=" + currencyID(to) + "&vs_currencies=" + from
		client := resty.New()
		log.Println("–ó–∞–ø—Ä–æ—Å –∫ API CoinGecko:", url) // –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å

		resp, err := client.R().
			SetHeader("Accept", "application/json").
			SetResult(map[string]map[string]float64{}).
			Get(url)

		if err != nil || resp.IsError() {
			log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞:", err)
			log.Println("–û—Ç–≤–µ—Ç –æ—Ç API:", resp) // –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –æ—Ç API
			c.JSON(http.StatusInternalServerError, gin.H{"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å"})
			return
		}

		data := *resp.Result().(*map[string]map[string]float64)
		rate := data[currencyID(to)][from]
		if rate == 0 {
			c.JSON(http.StatusInternalServerError, gin.H{"error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫—É—Ä—Å"})
			return
		}

		converted := req.Amount / rate
		c.JSON(http.StatusOK, ConvertResponse{ConvertedAmount: converted})
	})

	log.Println("üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:" + port)
	r.Run(":" + port) // –ó–∞–ø—É—Å–∫ –Ω–∞ –ø–æ—Ä—Ç—É, –∫–æ—Ç–æ—Ä—ã–π —É–∫–∞–∑–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
}

// currencyID —Å–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–∏–∫–µ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä, "usdt") —Å CoinGecko ID
func currencyID(symbol string) string {
	switch strings.ToLower(symbol) {
	case "usdt":
		return "tether"
	case "btc":
		return "bitcoin"
	case "eth":
		return "ethereum"
	default:
		return strings.ToLower(symbol) // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
	}
}
